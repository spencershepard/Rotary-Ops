# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MissionGeneratorUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1280, 720))
        MainWindow.setMaximumSize(QtCore.QSize(1280, 720))
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("assets/icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowOpacity(4.0)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.logistics_crates_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.logistics_crates_checkBox.setGeometry(QtCore.QRect(980, 231, 251, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.logistics_crates_checkBox.setFont(font)
        self.logistics_crates_checkBox.setChecked(True)
        self.logistics_crates_checkBox.setObjectName("logistics_crates_checkBox")
        self.advanced_defenses_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.advanced_defenses_checkBox.setGeometry(QtCore.QRect(510, 350, 341, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.advanced_defenses_checkBox.setFont(font)
        self.advanced_defenses_checkBox.setObjectName("advanced_defenses_checkBox")
        self.red_forces_label = QtWidgets.QLabel(self.centralwidget)
        self.red_forces_label.setGeometry(QtCore.QRect(470, 80, 81, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.red_forces_label.setFont(font)
        self.red_forces_label.setObjectName("red_forces_label")
        self.scenario_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.scenario_comboBox.setGeometry(QtCore.QRect(40, 10, 351, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.scenario_comboBox.setFont(font)
        self.scenario_comboBox.setToolTip("")
        self.scenario_comboBox.setToolTipDuration(-1)
        self.scenario_comboBox.setWhatsThis("")
        self.scenario_comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.scenario_comboBox.setFrame(True)
        self.scenario_comboBox.setObjectName("scenario_comboBox")
        self.description_textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.description_textBrowser.setGeometry(QtCore.QRect(30, 390, 371, 211))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.description_textBrowser.setFont(font)
        self.description_textBrowser.setStyleSheet("padding: 5px;")
        self.description_textBrowser.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.description_textBrowser.setFrameShadow(QtWidgets.QFrame.Plain)
        self.description_textBrowser.setLineWidth(1)
        self.description_textBrowser.setObjectName("description_textBrowser")
        self.defense_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.defense_checkBox.setEnabled(True)
        self.defense_checkBox.setGeometry(QtCore.QRect(980, 140, 211, 28))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        self.defense_checkBox.setFont(font)
        self.defense_checkBox.setCheckable(True)
        self.defense_checkBox.setObjectName("defense_checkBox")
        self.redqty_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.redqty_spinBox.setGeometry(QtCore.QRect(1090, 80, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.redqty_spinBox.setFont(font)
        self.redqty_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.redqty_spinBox.setMinimum(0)
        self.redqty_spinBox.setMaximum(8)
        self.redqty_spinBox.setProperty("value", 2)
        self.redqty_spinBox.setObjectName("redqty_spinBox")
        self.redforces_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.redforces_comboBox.setGeometry(QtCore.QRect(560, 80, 391, 33))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.redforces_comboBox.sizePolicy().hasHeightForWidth())
        self.redforces_comboBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.redforces_comboBox.setFont(font)
        self.redforces_comboBox.setObjectName("redforces_comboBox")
        self.scenario_label_8 = QtWidgets.QLabel(self.centralwidget)
        self.scenario_label_8.setGeometry(QtCore.QRect(570, 180, 271, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.scenario_label_8.setFont(font)
        self.scenario_label_8.setObjectName("scenario_label_8")
        self.slot_template_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.slot_template_comboBox.setGeometry(QtCore.QRect(980, 474, 271, 33))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.slot_template_comboBox.setFont(font)
        self.slot_template_comboBox.setObjectName("slot_template_comboBox")
        self.scenario_label_5 = QtWidgets.QLabel(self.centralwidget)
        self.scenario_label_5.setGeometry(QtCore.QRect(1130, 40, 131, 18))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.scenario_label_5.setFont(font)
        self.scenario_label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.scenario_label_5.setObjectName("scenario_label_5")
        self.blue_forces_label = QtWidgets.QLabel(self.centralwidget)
        self.blue_forces_label.setGeometry(QtCore.QRect(470, 30, 81, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.blue_forces_label.setFont(font)
        self.blue_forces_label.setObjectName("blue_forces_label")
        self.blueqty_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.blueqty_spinBox.setGeometry(QtCore.QRect(1090, 30, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.blueqty_spinBox.setFont(font)
        self.blueqty_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.blueqty_spinBox.setMinimum(0)
        self.blueqty_spinBox.setMaximum(8)
        self.blueqty_spinBox.setProperty("value", 3)
        self.blueqty_spinBox.setObjectName("blueqty_spinBox")
        self.blueforces_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.blueforces_comboBox.setGeometry(QtCore.QRect(560, 30, 391, 33))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.blueforces_comboBox.setFont(font)
        self.blueforces_comboBox.setObjectName("blueforces_comboBox")
        self.scenario_label_4 = QtWidgets.QLabel(self.centralwidget)
        self.scenario_label_4.setGeometry(QtCore.QRect(1130, 90, 131, 18))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.scenario_label_4.setFont(font)
        self.scenario_label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.scenario_label_4.setObjectName("scenario_label_4")
        self.version_label = QtWidgets.QLabel(self.centralwidget)
        self.version_label.setGeometry(QtCore.QRect(1070, 650, 181, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.version_label.setFont(font)
        self.version_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.version_label.setObjectName("version_label")
        self.scenario_label_10 = QtWidgets.QLabel(self.centralwidget)
        self.scenario_label_10.setGeometry(QtCore.QRect(570, 220, 271, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.scenario_label_10.setFont(font)
        self.scenario_label_10.setObjectName("scenario_label_10")
        self.e_transport_helos_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.e_transport_helos_spinBox.setGeometry(QtCore.QRect(510, 220, 51, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.e_transport_helos_spinBox.sizePolicy().hasHeightForWidth())
        self.e_transport_helos_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.e_transport_helos_spinBox.setFont(font)
        self.e_transport_helos_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.e_transport_helos_spinBox.setMinimum(0)
        self.e_transport_helos_spinBox.setMaximum(8)
        self.e_transport_helos_spinBox.setProperty("value", 1)
        self.e_transport_helos_spinBox.setObjectName("e_transport_helos_spinBox")
        self.e_attack_planes_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.e_attack_planes_spinBox.setGeometry(QtCore.QRect(510, 180, 51, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.e_attack_planes_spinBox.sizePolicy().hasHeightForWidth())
        self.e_attack_planes_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.e_attack_planes_spinBox.setFont(font)
        self.e_attack_planes_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.e_attack_planes_spinBox.setMinimum(0)
        self.e_attack_planes_spinBox.setMaximum(8)
        self.e_attack_planes_spinBox.setProperty("value", 1)
        self.e_attack_planes_spinBox.setObjectName("e_attack_planes_spinBox")
        self.e_attack_helos_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.e_attack_helos_spinBox.setGeometry(QtCore.QRect(510, 140, 51, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.e_attack_helos_spinBox.sizePolicy().hasHeightForWidth())
        self.e_attack_helos_spinBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.e_attack_helos_spinBox.setFont(font)
        self.e_attack_helos_spinBox.setReadOnly(False)
        self.e_attack_helos_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.e_attack_helos_spinBox.setKeyboardTracking(True)
        self.e_attack_helos_spinBox.setMinimum(0)
        self.e_attack_helos_spinBox.setMaximum(8)
        self.e_attack_helos_spinBox.setProperty("value", 1)
        self.e_attack_helos_spinBox.setObjectName("e_attack_helos_spinBox")
        self.scenario_label_7 = QtWidgets.QLabel(self.centralwidget)
        self.scenario_label_7.setGeometry(QtCore.QRect(570, 140, 271, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.scenario_label_7.setFont(font)
        self.scenario_label_7.setObjectName("scenario_label_7")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(860, 480, 111, 24))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.scenario_label_9 = QtWidgets.QLabel(self.centralwidget)
        self.scenario_label_9.setGeometry(QtCore.QRect(500, 401, 251, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.scenario_label_9.setFont(font)
        self.scenario_label_9.setObjectName("scenario_label_9")
        self.awacs_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.awacs_checkBox.setGeometry(QtCore.QRect(980, 266, 241, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.awacs_checkBox.setFont(font)
        self.awacs_checkBox.setChecked(True)
        self.awacs_checkBox.setObjectName("awacs_checkBox")
        self.tankers_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.tankers_checkBox.setGeometry(QtCore.QRect(980, 302, 241, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.tankers_checkBox.setFont(font)
        self.tankers_checkBox.setChecked(True)
        self.tankers_checkBox.setObjectName("tankers_checkBox")
        self.voiceovers_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.voiceovers_checkBox.setGeometry(QtCore.QRect(500, 584, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.voiceovers_checkBox.setFont(font)
        self.voiceovers_checkBox.setChecked(True)
        self.voiceovers_checkBox.setObjectName("voiceovers_checkBox")
        self.smoke_pickup_zone_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.smoke_pickup_zone_checkBox.setGeometry(QtCore.QRect(500, 530, 231, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.smoke_pickup_zone_checkBox.setFont(font)
        self.smoke_pickup_zone_checkBox.setChecked(False)
        self.smoke_pickup_zone_checkBox.setObjectName("smoke_pickup_zone_checkBox")
        self.game_status_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.game_status_checkBox.setGeometry(QtCore.QRect(500, 560, 221, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.game_status_checkBox.setFont(font)
        self.game_status_checkBox.setChecked(True)
        self.game_status_checkBox.setTristate(False)
        self.game_status_checkBox.setObjectName("game_status_checkBox")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(570, 300, 261, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.inf_spawn_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.inf_spawn_spinBox.setGeometry(QtCore.QRect(510, 300, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.inf_spawn_spinBox.setFont(font)
        self.inf_spawn_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.inf_spawn_spinBox.setMinimum(0)
        self.inf_spawn_spinBox.setMaximum(20)
        self.inf_spawn_spinBox.setProperty("value", 0)
        self.inf_spawn_spinBox.setObjectName("inf_spawn_spinBox")
        self.troop_drop_spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.troop_drop_spinBox.setGeometry(QtCore.QRect(510, 260, 51, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.troop_drop_spinBox.setFont(font)
        self.troop_drop_spinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.troop_drop_spinBox.setMinimum(0)
        self.troop_drop_spinBox.setMaximum(10)
        self.troop_drop_spinBox.setProperty("value", 4)
        self.troop_drop_spinBox.setObjectName("troop_drop_spinBox")
        self.random_weather_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.random_weather_checkBox.setGeometry(QtCore.QRect(980, 420, 211, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.random_weather_checkBox.setFont(font)
        self.random_weather_checkBox.setChecked(False)
        self.random_weather_checkBox.setTristate(False)
        self.random_weather_checkBox.setObjectName("random_weather_checkBox")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(570, 260, 281, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.apcs_spawn_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.apcs_spawn_checkBox.setGeometry(QtCore.QRect(980, 200, 251, 27))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.apcs_spawn_checkBox.setFont(font)
        self.apcs_spawn_checkBox.setChecked(True)
        self.apcs_spawn_checkBox.setObjectName("apcs_spawn_checkBox")
        self.generateButton = QtWidgets.QPushButton(self.centralwidget)
        self.generateButton.setEnabled(True)
        self.generateButton.setGeometry(QtCore.QRect(790, 600, 191, 51))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.generateButton.setFont(font)
        self.generateButton.setStyleSheet("")
        self.generateButton.setObjectName("generateButton")
        self.farp_always = QtWidgets.QRadioButton(self.centralwidget)
        self.farp_always.setGeometry(QtCore.QRect(520, 431, 261, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.farp_always.setFont(font)
        self.farp_always.setObjectName("farp_always")
        self.farp_buttonGroup = QtWidgets.QButtonGroup(MainWindow)
        self.farp_buttonGroup.setObjectName("farp_buttonGroup")
        self.farp_buttonGroup.addButton(self.farp_always)
        self.farp_never = QtWidgets.QRadioButton(self.centralwidget)
        self.farp_never.setGeometry(QtCore.QRect(520, 491, 271, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.farp_never.setFont(font)
        self.farp_never.setObjectName("farp_never")
        self.farp_buttonGroup.addButton(self.farp_never)
        self.farp_gunits = QtWidgets.QRadioButton(self.centralwidget)
        self.farp_gunits.setGeometry(QtCore.QRect(520, 460, 261, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.farp_gunits.setFont(font)
        self.farp_gunits.setChecked(True)
        self.farp_gunits.setObjectName("farp_gunits")
        self.farp_buttonGroup.addButton(self.farp_gunits)
        self.missionImage = QtWidgets.QLabel(self.centralwidget)
        self.missionImage.setEnabled(True)
        self.missionImage.setGeometry(QtCore.QRect(60, 60, 310, 310))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.missionImage.sizePolicy().hasHeightForWidth())
        self.missionImage.setSizePolicy(sizePolicy)
        self.missionImage.setMinimumSize(QtCore.QSize(300, 300))
        self.missionImage.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.missionImage.setStyleSheet("")
        self.missionImage.setText("")
        self.missionImage.setPixmap(QtGui.QPixmap("../assets/briefing1.png"))
        self.missionImage.setScaledContents(True)
        self.missionImage.setWordWrap(False)
        self.missionImage.setObjectName("missionImage")
        self.nextScenario_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.nextScenario_pushButton.setGeometry(QtCore.QRect(350, 620, 41, 31))
        self.nextScenario_pushButton.setObjectName("nextScenario_pushButton")
        self.prevScenario_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.prevScenario_pushButton.setGeometry(QtCore.QRect(40, 620, 41, 31))
        self.prevScenario_pushButton.setObjectName("prevScenario_pushButton")
        self.background_label = QtWidgets.QLabel(self.centralwidget)
        self.background_label.setGeometry(QtCore.QRect(1020, 600, 241, 51))
        self.background_label.setText("")
        self.background_label.setPixmap(QtGui.QPixmap("../assets/rotorops-dkgray.png"))
        self.background_label.setScaledContents(True)
        self.background_label.setObjectName("background_label")
        self.rateButton1 = QtWidgets.QPushButton(self.centralwidget)
        self.rateButton1.setEnabled(True)
        self.rateButton1.setGeometry(QtCore.QRect(120, 620, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rateButton1.setFont(font)
        self.rateButton1.setStyleSheet("border-image:url(\'../assets/star_full.png\');")
        self.rateButton1.setText("")
        self.rateButton1.setObjectName("rateButton1")
        self.hotstart_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.hotstart_checkBox.setGeometry(QtCore.QRect(980, 520, 271, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.hotstart_checkBox.setFont(font)
        self.hotstart_checkBox.setChecked(False)
        self.hotstart_checkBox.setTristate(False)
        self.hotstart_checkBox.setObjectName("hotstart_checkBox")
        self.rateButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.rateButton2.setEnabled(True)
        self.rateButton2.setGeometry(QtCore.QRect(160, 620, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rateButton2.setFont(font)
        self.rateButton2.setStyleSheet("border-image:url(\'../assets/star_full.png\');")
        self.rateButton2.setText("")
        self.rateButton2.setObjectName("rateButton2")
        self.rateButton3 = QtWidgets.QPushButton(self.centralwidget)
        self.rateButton3.setEnabled(True)
        self.rateButton3.setGeometry(QtCore.QRect(200, 620, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rateButton3.setFont(font)
        self.rateButton3.setStyleSheet("border-image:url(\'../assets/star_full.png\');")
        self.rateButton3.setText("")
        self.rateButton3.setObjectName("rateButton3")
        self.rateButton4 = QtWidgets.QPushButton(self.centralwidget)
        self.rateButton4.setEnabled(True)
        self.rateButton4.setGeometry(QtCore.QRect(240, 620, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rateButton4.setFont(font)
        self.rateButton4.setStyleSheet("border-image:url(\'../assets/star_full.png\');")
        self.rateButton4.setText("")
        self.rateButton4.setObjectName("rateButton4")
        self.rateButton5 = QtWidgets.QPushButton(self.centralwidget)
        self.rateButton5.setEnabled(True)
        self.rateButton5.setGeometry(QtCore.QRect(280, 620, 31, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.rateButton5.setFont(font)
        self.rateButton5.setStyleSheet("border-image:url(\'../assets/star_full.png\');")
        self.rateButton5.setText("")
        self.rateButton5.setObjectName("rateButton5")
        self.time_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.time_comboBox.setGeometry(QtCore.QRect(980, 370, 161, 33))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        self.time_comboBox.setFont(font)
        self.time_comboBox.setObjectName("time_comboBox")
        self.farp_spawn_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.farp_spawn_checkBox.setGeometry(QtCore.QRect(980, 550, 271, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.farp_spawn_checkBox.setFont(font)
        self.farp_spawn_checkBox.setChecked(False)
        self.farp_spawn_checkBox.setTristate(False)
        self.farp_spawn_checkBox.setObjectName("farp_spawn_checkBox")
        self.perks_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.perks_checkBox.setGeometry(QtCore.QRect(500, 610, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.perks_checkBox.setFont(font)
        self.perks_checkBox.setChecked(True)
        self.perks_checkBox.setObjectName("perks_checkBox")
        self.rotorops_server_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.rotorops_server_checkBox.setEnabled(True)
        self.rotorops_server_checkBox.setGeometry(QtCore.QRect(1020, 650, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(7)
        font.setBold(False)
        self.rotorops_server_checkBox.setFont(font)
        self.rotorops_server_checkBox.setChecked(False)
        self.rotorops_server_checkBox.setObjectName("rotorops_server_checkBox")
        self.saveConfigButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveConfigButton.setEnabled(True)
        self.saveConfigButton.setGeometry(QtCore.QRect(660, 600, 121, 51))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.saveConfigButton.setFont(font)
        self.saveConfigButton.setStyleSheet("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("resources/floppy-disk.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveConfigButton.setIcon(icon1)
        self.saveConfigButton.setObjectName("saveConfigButton")
        self.blueforces_skill_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.blueforces_skill_comboBox.setGeometry(QtCore.QRect(960, 31, 120, 33))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.blueforces_skill_comboBox.setFont(font)
        self.blueforces_skill_comboBox.setObjectName("blueforces_skill_comboBox")
        self.redforces_skill_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.redforces_skill_comboBox.setGeometry(QtCore.QRect(960, 80, 120, 33))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        font.setWeight(50)
        self.redforces_skill_comboBox.setFont(font)
        self.redforces_skill_comboBox.setObjectName("redforces_skill_comboBox")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        self.menuMap = QtWidgets.QMenu(self.menubar)
        self.menuMap.setObjectName("menuMap")
        self.menuFilter = QtWidgets.QMenu(self.menubar)
        self.menuFilter.setObjectName("menuFilter")
        self.menuPreferences = QtWidgets.QMenu(self.menubar)
        self.menuPreferences.setObjectName("menuPreferences")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(False)
        self.statusbar.setFont(font)
        self.statusbar.setAcceptDrops(False)
        self.statusbar.setStyleSheet("")
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_generateMission = QtWidgets.QAction(MainWindow)
        self.action_generateMission.setObjectName("action_generateMission")
        self.action_scenarioSelected = QtWidgets.QAction(MainWindow)
        self.action_scenarioSelected.setObjectName("action_scenarioSelected")
        self.action_blueforcesSelected = QtWidgets.QAction(MainWindow)
        self.action_blueforcesSelected.setObjectName("action_blueforcesSelected")
        self.action_redforcesSelected = QtWidgets.QAction(MainWindow)
        self.action_redforcesSelected.setObjectName("action_redforcesSelected")
        self.action_defensiveModeChanged = QtWidgets.QAction(MainWindow)
        self.action_defensiveModeChanged.setObjectName("action_defensiveModeChanged")
        self.action_nextScenario = QtWidgets.QAction(MainWindow)
        self.action_nextScenario.setObjectName("action_nextScenario")
        self.action_prevScenario = QtWidgets.QAction(MainWindow)
        self.action_prevScenario.setObjectName("action_prevScenario")
        self.actionCaucasus = QtWidgets.QAction(MainWindow)
        self.actionCaucasus.setCheckable(True)
        self.actionCaucasus.setChecked(True)
        self.actionCaucasus.setObjectName("actionCaucasus")
        self.actionPersian_Gulf = QtWidgets.QAction(MainWindow)
        self.actionPersian_Gulf.setCheckable(True)
        self.actionPersian_Gulf.setChecked(True)
        self.actionPersian_Gulf.setObjectName("actionPersian_Gulf")
        self.actionMarianas = QtWidgets.QAction(MainWindow)
        self.actionMarianas.setCheckable(True)
        self.actionMarianas.setChecked(True)
        self.actionMarianas.setObjectName("actionMarianas")
        self.actionNevada = QtWidgets.QAction(MainWindow)
        self.actionNevada.setCheckable(True)
        self.actionNevada.setChecked(True)
        self.actionNevada.setObjectName("actionNevada")
        self.actionSyria = QtWidgets.QAction(MainWindow)
        self.actionSyria.setCheckable(True)
        self.actionSyria.setChecked(True)
        self.actionSyria.setObjectName("actionSyria")
        self.actionMultiplayer = QtWidgets.QAction(MainWindow)
        self.actionMultiplayer.setCheckable(True)
        self.actionMultiplayer.setChecked(True)
        self.actionMultiplayer.setObjectName("actionMultiplayer")
        self.actionSave_Directory = QtWidgets.QAction(MainWindow)
        self.actionSave_Directory.setObjectName("actionSave_Directory")
        self.action_slotChanged = QtWidgets.QAction(MainWindow)
        self.action_slotChanged.setObjectName("action_slotChanged")
        self.actionIncluded = QtWidgets.QAction(MainWindow)
        self.actionIncluded.setCheckable(True)
        self.actionIncluded.setChecked(True)
        self.actionIncluded.setObjectName("actionIncluded")
        self.actionUser = QtWidgets.QAction(MainWindow)
        self.actionUser.setObjectName("actionUser")
        self.actionDownloaded = QtWidgets.QAction(MainWindow)
        self.actionDownloaded.setObjectName("actionDownloaded")
        self.action_downloadButton = QtWidgets.QAction(MainWindow)
        self.action_downloadButton.setObjectName("action_downloadButton")
        self.action_rateButton1 = QtWidgets.QAction(MainWindow)
        self.action_rateButton1.setObjectName("action_rateButton1")
        self.actionSingle_Player = QtWidgets.QAction(MainWindow)
        self.actionSingle_Player.setCheckable(True)
        self.actionSingle_Player.setChecked(True)
        self.actionSingle_Player.setObjectName("actionSingle_Player")
        self.actionCo_Op = QtWidgets.QAction(MainWindow)
        self.actionCo_Op.setCheckable(True)
        self.actionCo_Op.setChecked(True)
        self.actionCo_Op.setObjectName("actionCo_Op")
        self.actionMapMenu = QtWidgets.QAction(MainWindow)
        self.actionMapMenu.setObjectName("actionMapMenu")
        self.actionFilterMenu = QtWidgets.QAction(MainWindow)
        self.actionFilterMenu.setObjectName("actionFilterMenu")
        self.action_rateButton2 = QtWidgets.QAction(MainWindow)
        self.action_rateButton2.setObjectName("action_rateButton2")
        self.action_rateButton3 = QtWidgets.QAction(MainWindow)
        self.action_rateButton3.setObjectName("action_rateButton3")
        self.action_rateButton4 = QtWidgets.QAction(MainWindow)
        self.action_rateButton4.setObjectName("action_rateButton4")
        self.action_rateButton5 = QtWidgets.QAction(MainWindow)
        self.action_rateButton5.setObjectName("action_rateButton5")
        self.actionSave_Mission_Config = QtWidgets.QAction(MainWindow)
        self.actionSave_Mission_Config.setObjectName("actionSave_Mission_Config")
        self.menuMap.addAction(self.actionCaucasus)
        self.menuMap.addAction(self.actionPersian_Gulf)
        self.menuMap.addAction(self.actionMarianas)
        self.menuMap.addAction(self.actionNevada)
        self.menuMap.addAction(self.actionSyria)
        self.menuFilter.addAction(self.actionMultiplayer)
        self.menuFilter.addAction(self.actionSingle_Player)
        self.menuFilter.addAction(self.actionCo_Op)
        self.menuPreferences.addAction(self.actionSave_Directory)
        self.menuTools.addAction(self.actionSave_Mission_Config)
        self.menubar.addAction(self.menuMap.menuAction())
        self.menubar.addAction(self.menuFilter.menuAction())
        self.menubar.addAction(self.menuPreferences.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())

        self.retranslateUi(MainWindow)
        self.generateButton.clicked.connect(self.action_generateMission.trigger) # type: ignore
        self.prevScenario_pushButton.clicked.connect(self.action_prevScenario.trigger) # type: ignore
        self.defense_checkBox.clicked.connect(self.action_defensiveModeChanged.trigger) # type: ignore
        self.slot_template_comboBox.activated['int'].connect(self.action_slotChanged.trigger) # type: ignore
        self.scenario_comboBox.currentIndexChanged['int'].connect(self.action_scenarioSelected.trigger) # type: ignore
        self.nextScenario_pushButton.clicked.connect(self.action_nextScenario.trigger) # type: ignore
        self.rateButton1.clicked.connect(self.action_rateButton1.trigger) # type: ignore
        self.rateButton2.clicked.connect(self.action_rateButton2.trigger) # type: ignore
        self.rateButton3.clicked.connect(self.action_rateButton3.trigger) # type: ignore
        self.rateButton4.clicked.connect(self.action_rateButton4.trigger) # type: ignore
        self.rateButton5.clicked.connect(self.action_rateButton5.trigger) # type: ignore
        self.saveConfigButton.clicked.connect(self.actionSave_Mission_Config.trigger) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "RotorOps Mission Generator"))
        self.logistics_crates_checkBox.setStatusTip(_translate("MainWindow", "Enable a base or FARP near the start position that can spawn CTLD crates for building ground units and air defenses.  Sling load the logistics containers to create new logistics sites."))
        self.logistics_crates_checkBox.setText(_translate("MainWindow", "Logistics Base"))
        self.advanced_defenses_checkBox.setStatusTip(_translate("MainWindow", "Each enemy conflict zone spawns a template of AA defenses and radar units that may spawn fighter intercepts for detected aircraft.  A good difficulty multiplier for multiplayer."))
        self.advanced_defenses_checkBox.setText(_translate("MainWindow", "Enemy Advanced Defenses"))
        self.red_forces_label.setText(_translate("MainWindow", "Red Forces:"))
        self.scenario_comboBox.setStatusTip(_translate("MainWindow", "Tip: You can create your own templates that include mission options like kneeboards, briefings, weather, static units, triggers, scripts, etc."))
        self.description_textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Segoe UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'MS Shell Dlg 2\'; font-size:10pt;\">Provide close air support for our convoys as we take back Las Vegas from the enemy!</span></p></body></html>"))
        self.defense_checkBox.setStatusTip(_translate("MainWindow", "Turn the tables and defend your zones against the enemy\'s attack."))
        self.defense_checkBox.setText(_translate("MainWindow", "Blue on Defense"))
        self.redqty_spinBox.setStatusTip(_translate("MainWindow", "Red vehicle groups per staging or conflict zone."))
        self.redforces_comboBox.setStatusTip(_translate("MainWindow", "Tip: You can create your own custom ground forces groups to be automatically generated."))
        self.scenario_label_8.setStatusTip(_translate("MainWindow", "Approximate number of enemy attack plane group spawns."))
        self.scenario_label_8.setText(_translate("MainWindow", "Enemy Attack Planes"))
        self.slot_template_comboBox.setStatusTip(_translate("MainWindow", "Default player/client spawn locations at a friendly airport."))
        self.scenario_label_5.setText(_translate("MainWindow", "Groups Per Zone"))
        self.blue_forces_label.setText(_translate("MainWindow", "Blue Forces:"))
        self.blueqty_spinBox.setStatusTip(_translate("MainWindow", "Blue vehicle groups per staging or conflict zone."))
        self.blueforces_comboBox.setStatusTip(_translate("MainWindow", "Tip: You can create your own custom ground forces groups to be automatically generated."))
        self.scenario_label_4.setText(_translate("MainWindow", "Groups Per Zone"))
        self.version_label.setText(_translate("MainWindow", "Version string"))
        self.scenario_label_10.setStatusTip(_translate("MainWindow", "Approximate number of enemy transport helicopter spawns."))
        self.scenario_label_10.setText(_translate("MainWindow", "Enemy Transport Helicopters"))
        self.e_transport_helos_spinBox.setStatusTip(_translate("MainWindow", "Approximate number of enemy transport helicopter spawns."))
        self.e_attack_planes_spinBox.setStatusTip(_translate("MainWindow", "Approximate number of enemy attack plane group spawns."))
        self.e_attack_helos_spinBox.setStatusTip(_translate("MainWindow", "Approximate number of enemy attack helicopter group spawns."))
        self.scenario_label_7.setStatusTip(_translate("MainWindow", "Approximate number of enemy attack helicopter group spawns."))
        self.scenario_label_7.setText(_translate("MainWindow", "Enemy Attack Helicopters"))
        self.label_2.setText(_translate("MainWindow", "Player Slots:"))
        self.scenario_label_9.setText(_translate("MainWindow", "Zone FARP Conditions:"))
        self.awacs_checkBox.setStatusTip(_translate("MainWindow", "Spawn a friendly AWACS with fighter escorts."))
        self.awacs_checkBox.setText(_translate("MainWindow", "Friendly AWACS with escort"))
        self.tankers_checkBox.setStatusTip(_translate("MainWindow", "Spawn friendly tankers for both boom and basket refueling."))
        self.tankers_checkBox.setText(_translate("MainWindow", "Friendly Tankers"))
        self.voiceovers_checkBox.setStatusTip(_translate("MainWindow", "Voiceovers from the ground commander. Helps keep focus on the active zone."))
        self.voiceovers_checkBox.setText(_translate("MainWindow", "Voiceovers"))
        self.smoke_pickup_zone_checkBox.setStatusTip(_translate("MainWindow", "Troop pickup zones and FARPs will be marked with blue smoke."))
        self.smoke_pickup_zone_checkBox.setText(_translate("MainWindow", "Smoke at Troop Pickup Zones"))
        self.game_status_checkBox.setStatusTip(_translate("MainWindow", "Enable an onscreen zone status display.  This helps keep focus on the active conflict zone."))
        self.game_status_checkBox.setText(_translate("MainWindow", "Game Status Display"))
        self.label.setStatusTip(_translate("MainWindow", "Total number of infantry groups to spawn per game."))
        self.label.setText(_translate("MainWindow", "Infantry Spawns"))
        self.inf_spawn_spinBox.setStatusTip(_translate("MainWindow", "Total number of infantry groups to spawn per game."))
        self.troop_drop_spinBox.setStatusTip(_translate("MainWindow", "The number of troop drops per transport helicopter flight."))
        self.random_weather_checkBox.setStatusTip(_translate("MainWindow", "Random weather preset will be applied."))
        self.random_weather_checkBox.setText(_translate("MainWindow", "Random Weather"))
        self.label_3.setStatusTip(_translate("MainWindow", "The number of troop drops per transport helicopter flight."))
        self.label_3.setText(_translate("MainWindow", "Transport Drop Points"))
        self.apcs_spawn_checkBox.setStatusTip(_translate("MainWindow", "Friendly/enemy APCs will drop infantry when reaching a new conflict zone. "))
        self.apcs_spawn_checkBox.setText(_translate("MainWindow", "APCs Spawn Infantry"))
        self.generateButton.setStatusTip(_translate("MainWindow", "Click to generate mission."))
        self.generateButton.setText(_translate("MainWindow", "GENERATE MISSION"))
        self.farp_always.setStatusTip(_translate("MainWindow", "Always spawn a FARP in defeated conflict zones."))
        self.farp_always.setText(_translate("MainWindow", "Always"))
        self.farp_never.setStatusTip(_translate("MainWindow", "Never spawn FARPs in defeated conflict zones."))
        self.farp_never.setText(_translate("MainWindow", "Never"))
        self.farp_gunits.setStatusTip(_translate("MainWindow", "Only spawn FARPs in defeated conflict zones if we have sufficient ground units remaining."))
        self.farp_gunits.setText(_translate("MainWindow", "20% Ground Units Remaining"))
        self.nextScenario_pushButton.setText(_translate("MainWindow", ">"))
        self.prevScenario_pushButton.setText(_translate("MainWindow", "<"))
        self.rateButton1.setStatusTip(_translate("MainWindow", "Submit a review for this mission scenario."))
        self.hotstart_checkBox.setStatusTip(_translate("MainWindow", "Player helicopters start with engines running on the ground.  No effect for FARP spawns or if player slots says \'Locked to scenario\'"))
        self.hotstart_checkBox.setText(_translate("MainWindow", "Player Hotstart"))
        self.rateButton2.setStatusTip(_translate("MainWindow", "Submit a review for this mission scenario."))
        self.rateButton3.setStatusTip(_translate("MainWindow", "Submit a review for this mission scenario."))
        self.rateButton4.setStatusTip(_translate("MainWindow", "Submit a review for this mission scenario."))
        self.rateButton5.setStatusTip(_translate("MainWindow", "Submit a review for this mission scenario."))
        self.time_comboBox.setStatusTip(_translate("MainWindow", "Mission start time of day.  \'Default\' is the start time as defined by the mission template designer."))
        self.farp_spawn_checkBox.setStatusTip(_translate("MainWindow", "Add helicopter slots where zone FARPs will be built.  Helicopters will be empty fuel, requiring the FARP to be established to refuel and rearm."))
        self.farp_spawn_checkBox.setText(_translate("MainWindow", "Spawns at zone FARPs"))
        self.perks_checkBox.setStatusTip(_translate("MainWindow", "Adds a rewards system with points for kills, troop drops, etc.  See the F10 menu to use Perks."))
        self.perks_checkBox.setText(_translate("MainWindow", "Perks"))
        self.rotorops_server_checkBox.setStatusTip(_translate("MainWindow", "Generate missions for RotorOps public servers."))
        self.rotorops_server_checkBox.setText(_translate("MainWindow", "RotorOps Server Mission"))
        self.saveConfigButton.setStatusTip(_translate("MainWindow", "Save these mission options for next time."))
        self.saveConfigButton.setText(_translate("MainWindow", " Save Config"))
        self.menuMap.setTitle(_translate("MainWindow", "Map"))
        self.menuFilter.setTitle(_translate("MainWindow", "Filter"))
        self.menuPreferences.setTitle(_translate("MainWindow", "Preferences"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.action_generateMission.setText(_translate("MainWindow", "_generateMission"))
        self.action_scenarioSelected.setText(_translate("MainWindow", "_scenarioSelected"))
        self.action_blueforcesSelected.setText(_translate("MainWindow", "_blueforcesSelected"))
        self.action_redforcesSelected.setText(_translate("MainWindow", "_redforcesSelected"))
        self.action_defensiveModeChanged.setText(_translate("MainWindow", "_defensiveModeChanged"))
        self.action_nextScenario.setText(_translate("MainWindow", "_nextScenario"))
        self.action_prevScenario.setText(_translate("MainWindow", "_prevScenario"))
        self.actionCaucasus.setText(_translate("MainWindow", "Caucasus"))
        self.actionPersian_Gulf.setText(_translate("MainWindow", "Persian Gulf"))
        self.actionMarianas.setText(_translate("MainWindow", "Marianas"))
        self.actionNevada.setText(_translate("MainWindow", "Nevada"))
        self.actionSyria.setText(_translate("MainWindow", "Syria"))
        self.actionMultiplayer.setText(_translate("MainWindow", "Multiplayer"))
        self.actionSave_Directory.setText(_translate("MainWindow", "Save Directory"))
        self.action_slotChanged.setText(_translate("MainWindow", "_slotChanged"))
        self.actionIncluded.setText(_translate("MainWindow", "Included"))
        self.actionUser.setText(_translate("MainWindow", "User"))
        self.actionDownloaded.setText(_translate("MainWindow", "Downloaded"))
        self.action_downloadButton.setText(_translate("MainWindow", "_downloadButton"))
        self.action_downloadButton.setToolTip(_translate("MainWindow", "_downloadButton"))
        self.action_rateButton1.setText(_translate("MainWindow", "_rateButton1"))
        self.action_rateButton1.setToolTip(_translate("MainWindow", "_rateButton1"))
        self.actionSingle_Player.setText(_translate("MainWindow", "Single-Player Only"))
        self.actionCo_Op.setText(_translate("MainWindow", "Co-Op Only"))
        self.actionMapMenu.setText(_translate("MainWindow", "actionMapMenu"))
        self.actionFilterMenu.setText(_translate("MainWindow", "FilterMenu"))
        self.action_rateButton2.setText(_translate("MainWindow", "_rateButton2"))
        self.action_rateButton2.setToolTip(_translate("MainWindow", "_rateButton2"))
        self.action_rateButton3.setText(_translate("MainWindow", "_rateButton3"))
        self.action_rateButton3.setToolTip(_translate("MainWindow", "_rateButton3"))
        self.action_rateButton4.setText(_translate("MainWindow", "_rateButton4"))
        self.action_rateButton4.setToolTip(_translate("MainWindow", "_rateButton4"))
        self.action_rateButton5.setText(_translate("MainWindow", "_rateButton5"))
        self.action_rateButton5.setToolTip(_translate("MainWindow", "_rateButton5"))
        self.actionSave_Mission_Config.setText(_translate("MainWindow", "Save Mission Config"))
        self.actionSave_Mission_Config.setToolTip(_translate("MainWindow", "Save Mission Config"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
